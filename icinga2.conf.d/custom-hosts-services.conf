object CheckCommand "check-sip-options" {
  command = [ PluginDir + "/check_sip2" ]

  arguments = {
    "-H" = "$sip_address$"
    "-P" = "$sip_port$"
    "-s" = "$accept_any_answer$"
    "-I" = "$bind_ip$"
    "-M" = "$custom_message$"
    "-t" = "$timeout$"
    "-r" = "$retries$"
  }

  vars += {
    "sip_address" = "$address$"
  }
}

object CheckCommand "check-kam-stat-above" {
  command = [ PluginDir + "/check_kamailio_stat_above.sh" ]

  arguments = {
    check_kam_stat_container = {
      skip_key = true
      value = "$container_name$"
      order = 1
    }
    check_kam_stat_statistic = {
      skip_key = true
      value = "$statistic$"
      order = 2
    }
    check_kam_stat_warn_level = {
      skip_key = true
      value = "$warn_level$"
      order = 3
    }
    check_kam_stat_crit_level = {
      skip_key = true
      value = "$crit_level$"
      order = 4
    }
  }
}

object CheckCommand "check-kam-stat-below" {
  command = [ PluginDir + "/check_kamailio_stat_below.sh" ]

  arguments = {
    check_kam_stat_container = {
      skip_key = true
      value = "$container_name$"
      order = 1
    }
    check_kam_stat_statistic = {
      skip_key = true
      value = "$statistic$"
      order = 2
    }
    check_kam_stat_warn_level = {
      skip_key = true
      value = "$warn_level$"
      order = 3
    }
    check_kam_stat_crit_level = {
      skip_key = true
      value = "$crit_level$"
      order = 4
    }
  }
}

object CheckCommand "check-diameter-peer" {
  command = [ PluginDir + "/check_diameter.py" ]

  arguments = {
    "-H" = {
      value = "$diameter_peer_address$"
      description = "Remote DIAMETER peer address"
    }
    "-p" = {
      value = "$diameter_peer_port$"
      description = "Remote DIAMETER peer port"
    }
    "-r" = {
      value = "$diameter_peer_realm$"
      description = "Realm for DIAMETER interworking"
    }
  }
}

object CheckCommand "check-influxdb-query" {
  command = [ PluginDir + "/check_influxdb_query.py" ]

  arguments = {
    "--host" = {
      value = "$influxdb_query_host$"
      description = "InfluxDB host"
    }
    "--port" = {
      value = "$influxdb_query_port$"
      description = "InfluxDB port"
    }
    "--organization" = {
      required = true
      value = "$influxdb_query_organization$"
      description = "InfluxDB schema / database from which to retrieve input time series"
    }
    "--query" = {
      required = true
      value = "$influxdb_query_query$"
      description = "InfluxDB query"
    }
    "--token" = {
      required = true
      value = "$influxdb_query_token$"
      description = "authentication token to connect database"
    }
    "--warning" = {
      value = "$influxdb_query_warning_range$"
      description = "return warning if value is outside RANGE"
    }
    "--critical" = {
      value = "$influxdb_query_critical_range$"
      description = "return critical if value is outside RANGE"
    }
  }
}

apply Service "DIAMETER peer CER/CEA" to Host {
  import "generic-service"
  check_command = "check-diameter-peer"

  vars += {
    diameter_peer_address = "$address$"
    diameter_peer_realm = "ims.mnc001.mcc001.3gppnetwork.org"
    diameter_peer_port = "$host.vars.diameter_peer_port$"
  }
  assign where host.vars.check_diameter
}

template Service "ssh-agent-service" {
  import "generic-service"
  vars += {
    "by_ssh_logname" = "nagios-remote"
    "by_ssh_identity" = "/etc/icinga2/id_rsa"
    "by_ssh_timeout" = 120
  }
  vars.original_check_command = check_command
  check_command = "by_ssh"
  vars.by_ssh_command = {{ get_check_command(service.vars.original_check_command).command }}
  vars.by_ssh_arguments = {{ get_check_command(service.vars.original_check_command).arguments }}
}

template Service "kam-stat-cdp:average_response_time" {
  check_command = "check-kam-stat-above"
  import "ssh-agent-service"

  vars += {
    statistic = "average_response_time"
    warn_level = 100
    crit_level = 200
  }
}

template Service "kam-stat-cdp:replies_response_time" {
  check_command = "check-kam-stat-above"
  import "ssh-agent-service"

  vars += {
    statistic = "replies_response_time"
    warn_level = 100
    crit_level = 200
  }
}

template Service "kam-stat-shmem:free_size" {
  check_command = "check-kam-stat-below"
  import "ssh-agent-service"

  vars += {
    statistic = "free_size"
    warn_level = 16384
    crit_level = 32768
  }
}

template Service "kam-stat-shmem:max_used_size" {
  check_command = "check-kam-stat-above"
  import "ssh-agent-service"

  vars += {
    statistic = "max_used_size"
    warn_level = 32768
    crit_level = 16384
  }
}

template Service "kam-stat-shmem:real_used_size" {
  check_command = "check-kam-stat-above"
  import "ssh-agent-service"

  vars += {
    statistic = "real_used_size"
    warn_level = 32768
    crit_level = 16384
  }
}

apply Service "P-CSCF DIAMETER average peers response time" to Host {
  import "kam-stat-cdp:average_response_time"
  vars += {
    container_name = "ims-pcscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "P-CSCF DIAMETER  average reply time" to Host {
  import "kam-stat-cdp:replies_response_time"
  vars += {
    container_name = "ims-pcscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "P-CSCF Free shared memory" to Host {
  import "kam-stat-shmem:free_size"
  vars += {
    container_name = "ims-pcscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "P-CSCF Max used shared memory size" to Host {
  import "kam-stat-shmem:max_used_size"
  vars += {
    container_name = "ims-pcscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "P-CSCF Real used shared memory size" to Host {
  import "kam-stat-shmem:real_used_size"
  vars += {
    container_name = "ims-pcscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "I-CSCF DIAMETER average peers response time" to Host {
  import "kam-stat-cdp:average_response_time"
  vars += {
    container_name = "ims-icscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "I-CSCF DIAMETER  average reply time" to Host {
  import "kam-stat-cdp:replies_response_time"
  vars += {
    container_name = "ims-icscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "I-CSCF Free shared memory" to Host {
  import "kam-stat-shmem:free_size"
  vars += {
    container_name = "ims-icscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "I-CSCF Max used shared memory size" to Host {
  import "kam-stat-shmem:max_used_size"
  vars += {
    container_name = "ims-icscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "I-CSCF Real used shared memory size" to Host {
  import "kam-stat-shmem:real_used_size"
  vars += {
    container_name = "ims-icscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "S-CSCF DIAMETER average peers response time" to Host {
  import "kam-stat-cdp:average_response_time"
  vars += {
    container_name = "ims-scscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "S-CSCF DIAMETER  average reply time" to Host {
  import "kam-stat-cdp:replies_response_time"
  vars += {
    container_name = "ims-scscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "S-CSCF Free shared memory" to Host {
  import "kam-stat-shmem:free_size"
  vars += {
    container_name = "ims-scscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "S-CSCF Max used shared memory size" to Host {
  import "kam-stat-shmem:max_used_size"
  vars += {
    container_name = "ims-scscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "S-CSCF Real used shared memory size" to Host {
  import "kam-stat-shmem:real_used_size"
  vars += {
    container_name = "ims-scscf-1"
  }
  assign where host.vars.cscf_host
}

apply Service "PING by SIP OPTIONS" to Host {
  check_command = "check-sip-options"
  import "ssh-agent-service"
  vars.sip_address = host.vars.sip_address
  assign where host.vars.check_sip
}

apply Service "Partitions" to Host {
  check_command = "disk"
  import "ssh-agent-service"
  if (host.vars.partitions) {
    vars.disk_partitions = host.vars.partitions
  }
  vars.disk_cfree = "10%"
  vars.disk_wfree = "20%"
  assign where host.vars.partitions
}

apply Service "Load" to Host {
  check_command = "load"
  import "ssh-agent-service"
  vars.load_wload1 = 6
  vars.load_wload5 = 5
  vars.load_wload15 = 4
  vars.load_cload1 = 8
  vars.load_cload5 = 7
  vars.load_cload15 = 6
  assign where host.vars.agent_type == "ssh"
}

apply Service "Processes count" to Host {
  check_command = "procs"
  import "ssh-agent-service"
  assign where host.vars.agent_type == "ssh"
}

template Host "cscf-template" {
  max_check_attempts = 3
  check_interval = 5m
  retry_interval = 1m
  enable_perfdata = true
  check_command = "hostalive"
  vars += {
    partitions = [ "/", "/opt/Roamware/logs/", "/opt/Roamware/db", "/tmp", "/run" ]
    check_sip = true
    agent_type = "ssh"
    cscf_host = true
    cscf_functions = ["pcscf", "icscf", "scscf"]
  }
}

template Host "mgw-template" {
  max_check_attempts = 3
  check_interval = 5m
  retry_interval = 1m
  enable_perfdata = true
  check_command = "hostalive"
  vars += {
    partitions = [ "/", "/opt/Roamware/logs/", "/opt/Roamware/db", "/tmp", "/run" ]
    check_rtpengine = true
    check_by_influx = true
  }
}

object Host "NW8RTP01" {
  import "mgw-template"
  address = "10.12.244.72"
}

object Host "NW8RTP02" {
  import "mgw-template"
  address = "10.12.244.79"
}

object Host "NW8RTP03" {
  import "mgw-template"
  address = "10.12.244.84"
}

object Host "NW8RTP04" {
  import "mgw-template"
  address = "10.12.244.90"
}

object Host "IH4RTP01" {
  import "mgw-template"
  address = "10.12.243.72"
}

object Host "IH4RTP02" {
  import "mgw-template"
  address = "10.12.243.79"
}

object Host "IH4RTP03" {
  import "mgw-template"
  address = "10.12.243.84"
}

object Host "IH4RTP04" {
  import "mgw-template"
  address = "10.12.243.90"
}

template Host "diameter-peer-template" {
  max_check_attempts = 3
  check_interval = 5m
  retry_interval = 1m
  enable_perfdata = true
  check_command = "hostalive"
  vars += {
    check_diameter = true
  }
}

object Host "pcrf1.ims.mnc001.mcc001.3gppnetwork.org" {
  import "diameter-peer-template"
  display_name = "PCRF1"
  address = "10.12.243.69"
  vars += {
    diameter_peer_port = 3867
  }
}

object Host "pcrf2.ims.mnc001.mcc001.3gppnetwork.org" {
  import "diameter-peer-template"
  display_name = "PCRF2"
  address = "10.12.243.76"
  vars += {
    diameter_peer_port = 3868
  }
}

object Host "pcrf3.ims.mnc001.mcc001.3gppnetwork.org" {
  import "diameter-peer-template"
  display_name = "PCRF3"
  address = "100.64.122.121"
  vars += {
    diameter_peer_port = 3867
  }
}

object Host "pcrf4.ims.mnc001.mcc001.3gppnetwork.org" {
  import "diameter-peer-template"
  display_name = "PCRF4"
  address = "100.64.122.137"
  vars += {
    diameter_peer_port = 3868
  }
}

object Host "NW8CSCF1" {
  import "cscf-template"
  address = "10.12.244.73"
  vars.sip_address = "100.64.123.52"
}

object Host "NW8CSCF2" {
  import "cscf-template"
  address = "10.12.244.80"
  vars.sip_address = "100.64.123.53"
}

object Host "NW8CSCF3" {
  import "cscf-template"
  address = "10.12.244.85"
  vars.sip_address = "100.64.123.54"
}

object Host "IH4CSCF3" {
  import "cscf-template"
  address = "10.12.243.25"
  vars.sip_address = "100.64.122.54"
}

object Host "IH4CSCF2" {
  import "cscf-template"
  address = "10.12.243.20"
  vars.sip_address = "100.64.122.53"
}

object Host "IH4CSCF1" {
  import "cscf-template"
  address = "10.12.243.13"
  vars.sip_address = "100.64.122.52"
}

template Service "check-influxdb-query-service" {
  import "generic-service"
  check_command = "check-influxdb-query"

  vars += {
    influxdb_query_host = "10.12.243.80"
    influxdb_query_port = "8086"
    influxdb_query_organization = "tcl"
    influxdb_query_token = "2pn5ZOBSdvn5J2IQSVP9IjeduMqWhuqEpPSSPGFW0KGkZS0MpYBo_yKzMgLwe2cF3Fr-KyZ2BayTNBaAYajtUQ=="
  }
}

apply Service "cdp-timeout-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " CDP timeouts per second"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "timeout")
        |> aggregate.rate(every: 60m, unit: 1s)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }
}

apply Service "answered-calls-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " answered calls per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_replies_2xx_invite")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  ignore where cscf_function == "icscf"
}

apply Service "forwarded-messages-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " forwarded messages per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_replies_2xx_message")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  ignore where cscf_function == "icscf"
}

apply Service "forwarded-calls-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " successfully forwarded calls per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_replies_2xx_refer")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  ignore where cscf_function == "icscf"
}

apply Service "successful-registrations-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " successful registrations per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_replies_2xx_reg")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  ignore where cscf_function == "icscf"
}

apply Service "call-attempts-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " call attempts per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_requests_invite")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }
}

apply Service "send-message-attempts-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " send message attempts per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_requests_message")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }
}

apply Service "call-redirect-attempts-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " call redirect attempts per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_requests_refer")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }
}

apply Service "registration-attempts-" for (cscf_function in host.vars.cscf_functions) {
  import "check-influxdb-query-service"

  display_name = cscf_function + " registration attempts per minute"

  vars += {
    influxdb_query_query = {{{
      import "experimental/aggregate"
      from(bucket: "kpi")
        |> range(start: -60m)
        |> filter(fn: (r) => r["function"] == "}}} + cscf_function + {{{")
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["_measurement"] == "rcv_requests_register")
        |> aggregate.rate(every: 60m, unit: 1m)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }
}

apply Service "mgw-packets-processed-in-userspace" to Host {
  import "check-influxdb-query-service"

  display_name = "RTP packets relayed by userspace process"

  vars += {
    influxdb_query_query = {{{
      from(bucket: "kpi")
        |> range(start: -24h)
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["function"] == "mgw")
        |> filter(fn: (r) => r["_measurement"] == "relayed_packets_user")
        |> aggregateWindow(every: 1h, fn: mean, createEmpty: true)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  assign where host.vars.check_rtpengine && host.vars.check_by_influx
}

apply Service "mgw-packets-processed-in-kernelspace" to Host {
  import "check-influxdb-query-service"

  display_name = "RTP packets relayed by kernel module"

  vars += {
    influxdb_query_query = {{{
      from(bucket: "kpi")
        |> range(start: -2h)
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["function"] == "mgw")
        |> filter(fn: (r) => r["_measurement"] == "relayed_packets_kernel")
        |> aggregateWindow(every: 1h, fn: mean, createEmpty: true)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  assign where host.vars.check_rtpengine && host.vars.check_by_influx
}

apply Service "mgw-processing-errors-in-kernelspace" to Host {
  import "check-influxdb-query-service"

  display_name = "RTP packet relay by kernel module errors"

  vars += {
    influxdb_query_query = {{{
      from(bucket: "kpi")
        |> range(start: -2h)
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["function"] == "mgw")
        |> filter(fn: (r) => r["_measurement"] == "relayed_errors_kernel")
        |> aggregateWindow(every: 1h, fn: mean, createEmpty: true)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  assign where host.vars.check_rtpengine && host.vars.check_by_influx
}

apply Service "mgw-processing-errors-in-userspace" to Host {
  import "check-influxdb-query-service"

  display_name = "RTP packet relay by userspace process errors"

  vars += {
    influxdb_query_query = {{{
      from(bucket: "kpi")
        |> range(start: -2h)
        |> filter(fn: (r) => r["host"] == "$host.name$")
        |> filter(fn: (r) => r["function"] == "mgw")
        |> filter(fn: (r) => r["_measurement"] == "relayed_errors_user")
        |> aggregateWindow(every: 1h, fn: mean, createEmpty: true)
        |> limit(n: 1, offset: 1)
    }}}
    influxdb_query_warning = "0:15000"
    influxdb_query_critical = "0:25000"
  }

  assign where host.vars.check_rtpengine && host.vars.check_by_influx
}

object User "snmp-notifier" {
  display_name = "SNMP trap generator"
  enable_notifications = true
  states = [ OK, Warning, Critical ]
  types = [ Problem, Recovery ]
}

template NotificationCommand "ipv4-or-ipv6-notify" {
        vars.check_address = {{
                var addr_v4 = macro("$address$")
                var addr_v6 = macro("$address6$")

                if (addr_v4 && !macro("$check_ipv6$") || macro("$check_ipv4$")) {
                        return addr_v4
                } else {
                        return addr_v6
                }
        }}

        vars.check_ipv4 = false
        vars.check_ipv6 = false
}

# object NotificationCommand "ssh-snmp-trap-generator" {
#   import "ipv4-or-ipv6-notify"
#
#   command = [ PluginDir + "/check_by_ssh" ]
#
#
#   arguments += {
#     "-H" = {
#       value = "$ssh_snmp_trap_address$"
#       description = "Host name, IP Address, or unix socket (must be an absolute path)"
#     }
#     "-p" = {
#       value = "$ssh_snmp_trap_port$"
#       description = "Port number (default: none)"
#     }
#     "-C" = {{
#       var command = macro("$ssh_snmp_trap_command$")
#       var arguments = macro("$ssh_snmp_trap_arguments$")
#
#       if (typeof(command) == String && !arguments) {
#               return command
#       }
#
#       var escaped_args = []
#       for (arg in resolve_arguments(command, arguments)) {
#               escaped_args.add(escape_shell_arg(arg))
#       }
#       return escaped_args.join(" ")
#     }}
#     "-l" = {
#       value = "$ssh_snmp_trap_logname$"
#       description = "SSH user name on remote host [optional]"
#     }
#     "-i" = {
#       value = "$ssh_snmp_trap_identity$"
#       description = "identity of an authorized key [optional]"
#     }
#     "-q" = {
#       set_if = "$ssh_snmp_trap_quiet$"
#       description = "Tell ssh to suppress warning and diagnostic messages [optional]"
#     }
#     "-w" = {
#       value = "$ssh_snmp_trap_warn$"
#       description = "Response time to result in warning status (seconds)"
#     }
#     "-c" = {
#       value = "$ssh_snmp_trap_crit$"
#       description = "Response time to result in critical status (seconds)"
#     }
#     "-t" = {
#       value = "$ssh_snmp_trap_timeout$"
#       description = "Seconds before connection times out (default: 10)"
#     }
#     "-o" = {
#       value = "$ssh_snmp_trap_options$"
#       description = "Provide ssh options (may be repeated)"
#     }
#     "-4" = {
#       set_if = "$ssh_snmp_trap_ipv4$"
#       description = "Use IPv4 only"
#     }
#     "-6" = {
#       set_if = "$ssh_snmp_trap_ipv6$"
#       description = "Use IPv6 only"
#     }
#     "-E" = {
#       value = "$ssh_snmp_trap_skip_stderr$"
#       description = "Ignore all or (if specified) first n lines on STDERR [optional]"
#     }
#   }
#
#   vars.ssh_snmp_trap_quiet = false
# }

template Notification "generic-service-notification" {
  interval = 15m

  states = [ OK, Warning, Critical, Unknown ]

  types = [ Problem, Recovery, Custom ]

  period = "24x7"
}

template Notification "generic-host-notification" {
  interval = 15m

  states = [ Up, Down ]

  types = [ Problem, Recovery ]

  period = "24x7"
}

# apply Notification "host-ssh-snmp-trapper" to Host {
#   import "generic-host-notification"
#
#   users = [ "snmp-notifier" ]
#
#   command = "ssh-snmp-trap-generator"
#
#   vars += {
#       ssh_snmp_trap_address = "172.17.81.204"                 # address where to ssh
#       ssh_snmp_trap_command = "/usr/bin/snmptrap"
#       ssh_snmp_trap_logname = "nagios-remote"
#       ssh_snmp_trap_identity = "/etc/icinga2/id_rsa"
#       ssh_snmp_trap_arguments = {
#         "-v" = {
#           required = true
#           value = "2c"
#           order = 1
#         }
#         "-c" = {
#           required = true
#           value = "public"
#           order = 2
#         }
#         "agent" = {
#           required = true
#           order  = 3
#           value = "172.27.7.191"                              # address where to send trap
#           skip_key = true
#         }
#         "uptime" = {
#           required = true
#           order = 4
#           value = "''"
#           skip_key = true
#         }
#         "NAGIOS-NOTIFY-MIB::nHostEvent" = {
#           required = true
#           description = ".1.3.6.1.4.1.20006.1.5"
#           order = 5
#           repeat_key = false
#           value = [
#             "nHostname",
#             "s",
#             "$host.name$",
#             "nHostStateID",
#             "i",
#             "$host.state_id$",
#             "nHostOutput",
#             "s",
#             "$host.last_check_result.output$",
#            ]
#         }
#       }
#   }
#
#   assign where host.vars.agent_type == "ssh"
# }
#
# apply Notification "service-ssh-snmp-trapper" to Service {
#   import "generic-service-notification"
#
#   users = [ "snmp-notifier" ]
#
#   command = "ssh-snmp-trap-generator"
#
#   vars += {
#       ssh_snmp_trap_address = "172.17.81.204"
#       ssh_snmp_trap_command = "/usr/bin/snmptrap"
#       ssh_snmp_trap_logname = "nagios-remote"
#       ssh_snmp_trap_identity = "/etc/icinga2/id_rsa"
#       ssh_snmp_trap_arguments = {
#         "-v" = {
#           required = true
#           value = "2c"
#           order = 1
#         }
#         "-c" = {
#           required = true
#           value = "public"
#           order = 2
#         }
#         "agent" = {
#           required = true
#           order  = 3
#           value = "172.27.7.191"
#           skip_key = true
#         }
#         "uptime" = {
#           required = true
#           order = 4
#           value = "''"
#           skip_key = true
#         }
#         "NAGIOS-NOTIFY-MIB::nSvcEvent" = {
#           required = true
#           description = ".1.3.6.1.4.1.20006.1.7"
#           order = 5
#           repeat_key = false
#           value = [
#             "nSvcStateID",
#             "i",
#             "$service.state_id$",
#             "nSvcHostname",
#             "s",
#             "$service.host_name$",
#             "nSvcDesc",
#             "s",
#             "$service.name$",
#             "nSvcOutput",
#             "s",
#             "$service.last_check_result.output$",
#            ]
#         }
#       }
#   }
#
#   assign where host.vars.agent_type == "ssh"
# }

object NotificationCommand "snmptrap" {

  import "ipv4-or-ipv6-notify"

  command = [ "/usr/bin/snmptrap" ]

  arguments += {
    "-v" = {
      required = true
      value = "2c"
      order = 1
    }
    "-c" = {
      required = true
      value = "public"
      order = 2
    }
    "agent" = {
      required = true
      order  = 3
      value = "$snmptrap_agent$"                              # address where to send trap
      skip_key = true
    }
    "uptime" = {
      required = true
      order = 4
      value = "''"
      skip_key = true
    }
    oids = {{
      var result = {
        required = true
        order = 5
        skip_key = true
        description = macro("$snmptrap_oid_line$")
        value = []
      }

      var oids = macro("$snmptrap_oids$")
      for (arg in oids) {
        result.value.add(escape_shell_arg(arg))
      }

      return result
    }}
  }
}

template Notification "service-snmptrap-notification" {
  import "generic-service-notification"

  users = [ "snmp-notifier" ]

  command = "snmptrap"

  vars += {
    "snmptrap_oid_line" = ".1.3.6.1.4.1.20006.1.7"
    "snmptrap_oids" = [
      "NAGIOS-NOTIFY-MIB::nSvcEvent",
      "nSvcStateID",
      "i",
      "$service.state_id$",
      "nSvcHostname",
      "s",
      "$service.host_name$",
      "nSvcDesc",
      "s",
      "$service.name$",
      "nSvcOutput",
      "s",
      "$service.last_check_result.output$",
    ]
  }
}

apply Notification "service-snmp-1-trapper" to Service {
  import "service-snmptrap-notification"

  vars += {
    "snmptrap_agent" = "10.230.83.202"
  }

  assign where true
}

apply Notification "service-snmp-2-trapper" to Service {
  import "service-snmptrap-notification"

  vars += {
    "snmptrap_agent" = "10.230.83.203"
  }

  assign where true
}

template Notification "host-snmptrap-notification" {
  import "generic-host-notification"

  users = [ "snmp-notifier" ]

  command = "snmptrap"

  vars += {
    "snmptrap_oid_line" = ".1.3.6.1.4.1.20006.1.5"
    "snmptrap_oids" = [
      "NAGIOS-NOTIFY-MIB::nHostEvent",
      "nHostname",
      "s",
      "$host.name$",
      "nHostStateID",
      "i",
      "$host.state_id$",
      "nHostOutput",
      "s",
      "$host.last_check_result.output$",
    ]
  }
}

apply Notification "host-snmp-1-trapper" to Host {
  import "host-snmptrap-notification"

  vars += {
    "snmptrap_agent" = "10.230.83.202"
  }

  assign where true
}

apply Notification "host-snmp-2-trapper" to Host {
  import "host-snmptrap-notification"

  vars += {
    "snmptrap_agent" = "10.230.83.203"
  }

  assign where true
}
