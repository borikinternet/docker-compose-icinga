object CheckCommand "check-sip-options" {
  command = [ PluginDir + "/check_sip2" ]

  arguments = {
    "-H" = "$sip_address$"
    "-P" = "$sip_port$"
    "-s" = "$accept_any_answer$"
    "-I" = "$bind_ip$"
    "-M" = "$custom_message$"
    "-t" = "$timeout$"
    "-r" = "$retries$"
  }

  vars += {
    "sip_address" = "$address$"
  }
}

template Service "ssh-agent-service" {
  import "generic-service"
  vars += {
    "by_ssh_logname" = "nagios-remote"
    "by_ssh_identity" = "/etc/icinga2/id_rsa"
  }
  vars.original_check_command = check_command
  check_command = "by_ssh"
  vars.by_ssh_command = {{ get_check_command(service.vars.original_check_command).command }}
  vars.by_ssh_arguments = {{ get_check_command(service.vars.original_check_command).arguments }}
}

apply Service "HP 1 by SIP" to Host {
  check_command = "check-sip-options"
  import "ssh-agent-service"
  vars += {
    sip_address = "172.18.69.227"
    bind_ip = host.vars.sip_address
  }
  assign where host.vars.check_sip
}

apply Service "HP 2 by SIP" to Host {
  check_command = "check-sip-options"
  import "ssh-agent-service"
  vars += {
    sip_address = "172.18.69.228"
    bind_ip = host.vars.sip_address
  }
  assign where host.vars.check_sip
}

apply Service "MRF by SIP" to Host {
  check_command = "check-sip-options"
  import "ssh-agent-service"
  vars.sip_address = host.vars.sip_address
  assign where host.vars.check_sip
}

apply Service "HP 1 by HTTP" to Host {
  check_command = "http"
  import "ssh-agent-service"
  vars += {
    http_address = "172.18.69.227"
    http_method = "POST"
    http_uri = "/VFMRFRestApi"
    http_port = 8495
  }
  assign where host.vars.check_sip
}

apply Service "HP 2 by HTTP" to Host {
  check_command = "http"
  import "ssh-agent-service"
  vars += {
    http_address = "172.18.69.228"
    http_method = "POST"
    http_uri = "/VFMRFRestApi"
    http_port = 8495
  }
  assign where host.vars.check_sip
}

apply Service "Partitions" to Host {
  check_command = "disk"
  import "ssh-agent-service"
  if (host.vars.partitions) {
    vars.disk_partitions = host.vars.partitions
  }
  vars.disk_cfree = "10%"
  vars.disk_wfree = "20%"
  assign where host.vars.partitions
}

apply Service "Load" to Host {
  check_command = "load"
  import "ssh-agent-service"
  vars.load_wload1 = 6
  vars.load_wload5 = 5
  vars.load_wload15 = 4
  vars.load_cload1 = 8
  vars.load_cload5 = 7
  vars.load_cload15 = 6
  assign where host.vars.agent_type == "ssh"
}

apply Service "MRF procs" to Host {
  check_command = "procs"
  import "ssh-agent-service"
  vars.procs_command = "freeswitch"
  vars.procs_critical = "1:10"
  assign where host.vars.agent_type == "ssh"
}

apply Service "Processes count" to Host {
  check_command = "procs"
  import "ssh-agent-service"
  assign where host.vars.agent_type == "ssh"
}

apply Service "MRF logs age" to Host {
  check_command = "file_age"
  import "ssh-agent-service"
  vars.file_age_file = "/opt/Roamware/logs/mrf/cdr-csv/Master.csv"
  assign where host.vars.agent_type == "ssh"
}

template Host "mrf-template" {
  max_check_attempts = 3
  check_interval = 5m
  retry_interval = 1m
  enable_perfdata = true
  check_command = "hostalive"
  vars += {
    partitions = [ "/", "/opt/Roamware/logs/" ]
    check_sip = true
    agent_type = "ssh"
  }
}

object Host "mrzoccvmivr01" {
  import "mrf-template"
  address = "172.17.81.204"
  vars.sip_address = "172.18.69.229"
}

object Host "mrzoccvmivr02" {
  import "mrf-template"
  address = "172.17.81.205"
  vars.sip_address = "172.18.69.230"
}

object User "snmp-notifier" {
  display_name = "SNMP trap generator"
  enable_notifications = true
  states = [ OK, Warning, Critical ]
  types = [ Problem, Recovery ]
}

template NotificationCommand "ipv4-or-ipv6-notify" {
        vars.check_address = {{
                var addr_v4 = macro("$address$")
                var addr_v6 = macro("$address6$")

                if (addr_v4 && !macro("$check_ipv6$") || macro("$check_ipv4$")) {
                        return addr_v4
                } else {
                        return addr_v6
                }
        }}

        vars.check_ipv4 = false
        vars.check_ipv6 = false
}

object NotificationCommand "ssh-snmp-trap-generator" {
  import "ipv4-or-ipv6-notify"

  command = [ PluginDir + "/check_by_ssh" ]


  arguments += {
    "-H" = {
      value = "$ssh_snmp_trap_address$"
      description = "Host name, IP Address, or unix socket (must be an absolute path)"
    }
    "-p" = {
      value = "$ssh_snmp_trap_port$"
      description = "Port number (default: none)"
    }
    "-C" = {{
      var command = macro("$ssh_snmp_trap_command$")
      var arguments = macro("$ssh_snmp_trap_arguments$")

      if (typeof(command) == String && !arguments) {
              return command
      }

      var escaped_args = []
      for (arg in resolve_arguments(command, arguments)) {
              escaped_args.add(escape_shell_arg(arg))
      }
      return escaped_args.join(" ")
    }}
    "-l" = {
      value = "$ssh_snmp_trap_logname$"
      description = "SSH user name on remote host [optional]"
    }
    "-i" = {
      value = "$ssh_snmp_trap_identity$"
      description = "identity of an authorized key [optional]"
    }
    "-q" = {
      set_if = "$ssh_snmp_trap_quiet$"
      description = "Tell ssh to suppress warning and diagnostic messages [optional]"
    }
    "-w" = {
      value = "$ssh_snmp_trap_warn$"
      description = "Response time to result in warning status (seconds)"
    }
    "-c" = {
      value = "$ssh_snmp_trap_crit$"
      description = "Response time to result in critical status (seconds)"
    }
    "-t" = {
      value = "$ssh_snmp_trap_timeout$"
      description = "Seconds before connection times out (default: 10)"
    }
    "-o" = {
      value = "$ssh_snmp_trap_options$"
      description = "Provide ssh options (may be repeated)"
    }
    "-4" = {
      set_if = "$ssh_snmp_trap_ipv4$"
      description = "Use IPv4 only"
    }
    "-6" = {
      set_if = "$ssh_snmp_trap_ipv6$"
      description = "Use IPv6 only"
    }
    "-E" = {
      value = "$ssh_snmp_trap_skip_stderr$"
      description = "Ignore all or (if specified) first n lines on STDERR [optional]"
    }
  }

  vars.ssh_snmp_trap_quiet = false
}

template Notification "generic-service-notification" {
  interval = 15m

  states = [ OK, Warning, Critical, Unknown ]

  types = [ Problem, Recovery, Custom ]

  period = "24x7"
}

template Notification "generic-host-notification" {
  interval = 15m

  states = [ Up, Down ]

  types = [ Problem, Recovery ]

  period = "24x7"
}

apply Notification "host-snmp-trapper" to Host {
  import "generic-host-notification"

  users = [ "snmp-notifier" ]

  command = "ssh-snmp-trap-generator"

  vars += {
      ssh_snmp_trap_address = "172.17.81.204"
      ssh_snmp_trap_command = "/usr/bin/snmptrap"
      ssh_snmp_trap_logname = "nagios-remote"
      ssh_snmp_trap_identity = "/etc/icinga2/id_rsa"
      ssh_snmp_trap_arguments = {
        "-v" = {
          required = true
          value = "2c"
          order = 1
        }
        "-c" = {
          required = true
          value = "public"
          order = 2
        }
        "agent" = {
          required = true
          order  = 3
          value = "172.27.7.191"
          skip_key = true
        }
        "uptime" = {
          required = true
          order = 4
          value = "''"
          skip_key = true
        }
        "NAGIOS-NOTIFY-MIB::nHostEvent" = {
          required = true
          description = ".1.3.6.1.4.1.20006.1.5"
          order = 5
          repeat_key = false
          value = [
            "nHostname",
            "s",
            "$host.name$",
            "nHostStateID",
            "i",
            "$host.state_id$",
            "nHostOutput",
            "s",
            "$host.last_check_result.output$",
           ]
        }
      }
  }

  assign where host.vars.agent_type == "ssh"
}

apply Notification "service-snmp-trapper" to Service {
  import "generic-service-notification"

  users = [ "snmp-notifier" ]

  command = "ssh-snmp-trap-generator"

  vars += {
      ssh_snmp_trap_address = "172.17.81.204"
      ssh_snmp_trap_command = "/usr/bin/snmptrap"
      ssh_snmp_trap_logname = "nagios-remote"
      ssh_snmp_trap_identity = "/etc/icinga2/id_rsa"
      ssh_snmp_trap_arguments = {
        "-v" = {
          required = true
          value = "2c"
          order = 1
        }
        "-c" = {
          required = true
          value = "public"
          order = 2
        }
        "agent" = {
          required = true
          order  = 3
          value = "172.27.7.191"
          skip_key = true
        }
        "uptime" = {
          required = true
          order = 4
          value = "''"
          skip_key = true
        }
        "NAGIOS-NOTIFY-MIB::nSvcEvent" = {
          required = true
          description = ".1.3.6.1.4.1.20006.1.7"
          order = 5
          repeat_key = false
          value = [
            "nSvcStateID",
            "i",
            "$service.state_id$",
            "nSvcHostname",
            "s",
            "$service.host_name$",
            "nSvcDesc",
            "s",
            "$service.name$",
            "nSvcOutput",
            "s",
            "$service.last_check_result.output$",
           ]
        }
      }
  }

  assign where host.vars.agent_type == "ssh"
}

